##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##


upstream users_services  {
	server 127.0.0.1:5300;
	server 127.0.0.1:5301;
	server 127.0.0.1:5302;
}

upstream articles_services  {
	server 127.0.0.1:5000;
	server 127.0.0.1:5001;
	server 127.0.0.1:5002;
}

upstream tags_services  {
	server 127.0.0.1:5200;
	server 127.0.0.1:5201;
	server 127.0.0.1:5202;
}

upstream comments_services  {
	server 127.0.0.1:5100;
	server 127.0.0.1:5101;
	server 127.0.0.1:5102;
}

upstream syndication_services  {
	server 127.0.0.1:5400;
	server 127.0.0.1:5401;
	server 127.0.0.1:5402;
}



# Default server configuration
#

proxy_cache_path /etc/nginx/cache keys_zone=mycache:10m;

server {

	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		
		#auth_request /auth;
		try_files $uri $uri/ =404;
	}


	location /users {

		auth_request /auth;
		proxy_pass_request_headers on;
		proxy_pass_request_body on;
		proxy_pass http://users_services/users;
	}

	location /users/new {

		proxy_pass_request_headers on;
		proxy_pass_request_body on;
		proxy_pass http://users_services/users/new;
	}


	location /articles {

		auth_request /auth;
		proxy_pass_request_headers on;
		proxy_pass_request_body on;
		proxy_pass http://articles_services/articles;
	}

	location /tags {

		auth_request /auth;
		proxy_pass_request_headers on;
		proxy_pass_request_body on;
		proxy_pass http://tags_services/tags;
	}

	location /comments {

		auth_request /auth;
		proxy_pass_request_headers on;
		proxy_pass_request_body on;
		proxy_pass http://comments_services/comments;
	}

	location /syndication {

		proxy_pass_request_headers on;
		proxy_pass_request_body on;
		proxy_pass http://syndication_services/syndication;
	}


	location = /auth {
		internal;
		proxy_pass              http://users_services/auth;
		proxy_pass_header  			Authorization;
		proxy_set_header 				Authorization $http_authorization;
		proxy_pass_request_body off;
		proxy_set_header 				Content-Length "";
		proxy_set_header 				X-Original-URI $request_uri;
		proxy_cache mycache;
		proxy_cache_key "$http_authorization";
		proxy_cache_valid any 5m;
	}


	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
